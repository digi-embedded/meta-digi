From: Franck LENORMAND <franck.lenormand@nxp.com>
Date: Tue, 15 Jun 2021 10:45:31 +0200
Subject: [PATCH 1/1] TEE-639 drivers: caam: skip JR init of CFG_JR_HAB_INDEX

On iMX8M SoC, the HAB requires the JR0 to be set to secure world to
decrypt the kernel image when loading the image in U-boot.

Before reaching u-boot, OPTEE and ATF set the JR0 to the non-secure
domain that leads to a HAB failure when trying to decrypt the kernel.

To fix the issue, this commit introduces CFG_JR_HAB_INDEX that specifies
which JR the HAB uses. OPTEE will skip the initialization of
CFG_JR_HAB_INDEX and leave it as secure.

It will also disable its usage in the device tree to inform the kernel.

Signed-off-by: Clement Faure <clement.faure@nxp.com>
Signed-off-by: Franck LENORMAND <franck.lenormand@nxp.com>
(cherry picked from commit 824acbfcd40973e0324002fe5ec4f388d52a7cb1)
Signed-off-by: Gonzalo Ruiz <Gonzalo.Ruiz@digi.com>
---
 core/arch/arm/plat-imx/crypto_conf.mk         |  6 ++++
 core/drivers/crypto/caam/hal/common/hal_cfg.c | 20 ++++++++++++-
 core/drivers/crypto/caam/hal/imx_8m/hal_cfg.c | 28 ++++++++++++++++++-
 .../crypto/caam/include/caam_hal_cfg.h        | 16 ++++++++++-
 .../drivers/crypto/caam/include/caam_hal_jr.h |  4 ++-
 5 files changed, 70 insertions(+), 4 deletions(-)

diff --git a/core/arch/arm/plat-imx/crypto_conf.mk b/core/arch/arm/plat-imx/crypto_conf.mk
index 2f4930df8..d9fd983e1 100644
--- a/core/arch/arm/plat-imx/crypto_conf.mk
+++ b/core/arch/arm/plat-imx/crypto_conf.mk
@@ -62,6 +62,12 @@ $(call force, CFG_JR_BLOCK_SIZE,0x1000)
 # Use another Job ring other than the one used by HAB.
 $(call force, CFG_JR_INDEX,2)  # Default JR index used
 $(call force, CFG_JR_INT,146)  # Default JR IT Number (114 + 32) = 146
+
+# Default JR used by the HAB
+# The HAB needs the JR to be assigned to secure world to decrypt the
+# kernel images.
+# By default it uses the JR0
+$(call force, CFG_JR_HAB_INDEX,0)
 else
 $(call force, CFG_CAAM_SIZE_ALIGN,1)
 #
diff --git a/core/drivers/crypto/caam/hal/common/hal_cfg.c b/core/drivers/crypto/caam/hal/common/hal_cfg.c
index 658210ecb..181f8984a 100644
--- a/core/drivers/crypto/caam/hal/common/hal_cfg.c
+++ b/core/drivers/crypto/caam/hal/common/hal_cfg.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-2-Clause
 /*
- * Copyright 2017-2020 NXP
+ * Copyright 2017-2021 NXP
  *
  * Brief   CAAM Configuration.
  */
@@ -75,6 +75,9 @@ enum caam_status caam_hal_cfg_get_conf(struct caam_jrcfg *jrcfg)
 #ifdef CFG_NXP_CAAM_RUNTIME_JR
 	caam_hal_jr_prepare_backup(jrcfg->base, jrcfg->offset);
 #endif
+
+	caam_hal_cfg_hab_jr_mgmt(jrcfg);
+
 exit_get_conf:
 	HAL_TRACE("HAL CFG Get CAAM config ret (0x%x)\n", retstatus);
 	return retstatus;
@@ -89,6 +92,12 @@ void caam_hal_cfg_common_setup_nsjobring(struct caam_jrcfg *jrcfg)
 	for (jrnum = caam_hal_ctrl_jrnum(jrcfg->base); jrnum; jrnum--) {
 		jr_offset = jrnum * JRX_BLOCK_SIZE;
 
+		/*
+		 * Skip configuration for the JR used by the HAB
+		 */
+		if (caam_hal_cfg_is_hab_jr(jr_offset))
+			continue;
+
 #ifdef CFG_NXP_CAAM_RUNTIME_JR
 		/*
 		 * When the Cryptographic driver is enabled, keep the
@@ -103,3 +112,12 @@ void caam_hal_cfg_common_setup_nsjobring(struct caam_jrcfg *jrcfg)
 			caam_hal_jr_prepare_backup(jrcfg->base, jr_offset);
 	}
 }
+
+__weak void caam_hal_cfg_hab_jr_mgmt(struct caam_jrcfg *jrcfg __unused)
+{
+}
+
+__weak bool caam_hal_cfg_is_hab_jr(paddr_t jr_offset __unused)
+{
+	return false;
+}
diff --git a/core/drivers/crypto/caam/hal/imx_8m/hal_cfg.c b/core/drivers/crypto/caam/hal/imx_8m/hal_cfg.c
index bbb3dd1cd..62afb1c8d 100644
--- a/core/drivers/crypto/caam/hal/imx_8m/hal_cfg.c
+++ b/core/drivers/crypto/caam/hal/imx_8m/hal_cfg.c
@@ -1,12 +1,38 @@
 // SPDX-License-Identifier: BSD-2-Clause
 /*
- * Copyright 2020 NXP
+ * Copyright 2020-2021 NXP
  *
  * Brief   CAAM Configuration.
  */
 #include <caam_hal_cfg.h>
+#include <caam_hal_jr.h>
+#include <kernel/boot.h>
+#include <registers/jr_regs.h>
 
 void caam_hal_cfg_setup_nsjobring(struct caam_jrcfg *jrcfg)
 {
 	caam_hal_cfg_common_setup_nsjobring(jrcfg);
 }
+
+void caam_hal_cfg_hab_jr_mgmt(struct caam_jrcfg *jrcfg)
+{
+	void *fdt = NULL;
+	struct caam_jrcfg tmp_jrcfg = {
+		.offset = (CFG_JR_HAB_INDEX + 1) * JRX_BLOCK_SIZE,
+	};
+
+	fdt = get_dt();
+	if (fdt) {
+		/* Ensure Secure Job Ring is secure only into DTB */
+		caam_hal_cfg_disable_jobring_dt(fdt, &tmp_jrcfg);
+	}
+
+	caam_hal_jr_prepare_backup(jrcfg->base, tmp_jrcfg.offset);
+}
+
+bool caam_hal_cfg_is_hab_jr(paddr_t jr_offset)
+{
+	unsigned int jr_idx = JRX_IDX(jr_offset);
+
+	return jr_idx == CFG_JR_HAB_INDEX;
+}
diff --git a/core/drivers/crypto/caam/include/caam_hal_cfg.h b/core/drivers/crypto/caam/include/caam_hal_cfg.h
index 13941de20..3d955b155 100644
--- a/core/drivers/crypto/caam/include/caam_hal_cfg.h
+++ b/core/drivers/crypto/caam/include/caam_hal_cfg.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: BSD-2-Clause */
 /*
- * Copyright 2018-2020 NXP
+ * Copyright 2018-2021 NXP
  *
  * Brief   CAAM Configuration header.
  */
@@ -46,6 +46,20 @@ void caam_hal_cfg_setup_nsjobring(struct caam_jrcfg *jrcfg);
  */
 void caam_hal_cfg_common_setup_nsjobring(struct caam_jrcfg *jrcfg);
 
+/*
+ * Removes the JR used by HAB from dtb and backup its DID
+ *
+ * @jrcfg   Job Ring configuration of HAB JR
+ */
+void caam_hal_cfg_hab_jr_mgmt(struct caam_jrcfg *jrcfg);
+
+/*
+ * Indicate if the job ring is used by the HAB
+ *
+ * @jr_offset   Job Ring offset
+ */
+bool caam_hal_cfg_is_hab_jr(paddr_t jr_offset);
+
 #ifdef CFG_DT
 /*
  * Returns the Job Ring configuration to be used by the TEE
diff --git a/core/drivers/crypto/caam/include/caam_hal_jr.h b/core/drivers/crypto/caam/include/caam_hal_jr.h
index bbb708802..224e761a6 100644
--- a/core/drivers/crypto/caam/include/caam_hal_jr.h
+++ b/core/drivers/crypto/caam/include/caam_hal_jr.h
@@ -1,12 +1,14 @@
 /* SPDX-License-Identifier: BSD-2-Clause */
 /*
- * Copyright 2018-2019 NXP
+ * Copyright 2018-2019, 2021 NXP
  *
  * Brief   CAAM Job Rings Hardware Abstration Layer header.
  */
 #ifndef __CAAM_HAL_JR_H__
 #define __CAAM_HAL_JR_H__
 
+#include <caam_common.h>
+
 /*
  * Configures the Job Ring Owner and lock it.
  * If the configuration is already locked, checks the configuration
